name: Pre-release

on:
  release:
    types:
      - prereleased

env:
  FILE_OCI_WEB: web-server.tar
  FILE_OCI_EMBEDDING: embedding-server.tar
  ARTIFACT_WEB: web-server
  ARTIFACT_EMBEDDING: embedding-server
  IMAGE_NAME_WEB: rokeller/photo-search
  IMAGE_NAME_EMBEDDING: rokeller/photo-search-embedding
  CARGO_TERM_COLOR: always
  RUSTUP_TOOLCHAIN: stable
  RUST_FINAL_TARGET: x86_64-unknown-linux-musl

jobs:
  build-web-server:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build web server container image
        run: |
          echo 'Build web server container image ...'
          docker image build \
            --build-arg APP_VERSION=$GITHUB_REF_NAME \
            -t ${{ env.IMAGE_NAME_WEB }} \
            -f containers/web-server.Dockerfile \
            .

          echo 'Export web server container image ...'
          docker image save ${{ env.IMAGE_NAME_WEB }} \
            -o ${{ env.FILE_OCI_WEB }}

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_WEB }}
          path: ${{ env.FILE_OCI_WEB }}

  build-embedding-server:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache cargo registry
        uses: actions/cache@v4
        continue-on-error: false
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Setup Rust
        run: |
          echo "Setup Rust '${{ env.RUSTUP_TOOLCHAIN }}' toolchain ..."
          rustup update ${{ env.RUSTUP_TOOLCHAIN }}
          rustup default ${{ env.RUSTUP_TOOLCHAIN }}
          echo 'Install cross for cross-compilation ...'
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Build Rust
        run: |
          echo "Build for ${{ env.RUST_FINAL_TARGET }} ..."
          cross build --release --target ${{ env.RUST_FINAL_TARGET }}

      - name: Build embedding server container image
        run: |
          echo 'Build embedding server container image ...'
          docker image build \
            --build-arg APP_VERSION=$GITHUB_REF_NAME \
            -t ${{ env.IMAGE_NAME_EMBEDDING }} \
            -f containers/embedding-server.Dockerfile \
            .

          echo 'Export embedding server container image ...'
          docker image save ${{ env.IMAGE_NAME_EMBEDDING }} \
            -o ${{ env.FILE_OCI_EMBEDDING }}

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_EMBEDDING }}
          path: ${{ env.FILE_OCI_EMBEDDING }}

  push-images:
    needs: [ build-web-server, build-embedding-server ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true
      - name: Push container images
        run: |
          echo 'Importing and tagging images from artifacts ...'
          docker image load -i ${{ env.FILE_OCI_WEB }}
          docker image tag ${{ env.IMAGE_NAME_WEB }} \
            ${{ env.IMAGE_NAME_WEB }}:$GITHUB_REF_NAME
          docker image load -i ${{ env.FILE_OCI_EMBEDDING }}
          docker image tag ${{ env.IMAGE_NAME_EMBEDDING }} \
            ${{ env.IMAGE_NAME_EMBEDDING }}:$GITHUB_REF_NAME

          echo 'Logging in to docker hub registry ...'
          echo -n "${{ secrets.DOCKER_PASSWORD }}" | docker login \
            -u ${{ secrets.DOCKER_USERNAME }} \
            --password-stdin

          echo 'Pushing container images ...'
          docker image push ${{ env.IMAGE_NAME_WEB }}:$GITHUB_REF_NAME
          docker image push ${{ env.IMAGE_NAME_EMBEDDING }}:$GITHUB_REF_NAME

          echo 'Logging out of docker hub registry ...'
          docker logout
